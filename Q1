#include <iostream>
#include <vector>
#include <stack>
#include <unordered_map>
using namespace std;

// Function to find the maximum sum of a subarray
int maxSubArraySum(vector<int>& arr) {
    int maxSum = arr[0], currentSum = arr[0];
    for (int i = 1; i < arr.size(); ++i) {
        currentSum = max(arr[i], currentSum + arr[i]);
        maxSum = max(maxSum, currentSum);
    }
    return maxSum;
}

// Function to find the next greater element
vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
    unordered_map<int, int> nextGreater;
    stack<int> s;
    
    for (int i = 0; i < nums2.size(); ++i) {
        while (!s.empty() && nums2[i] > s.top()) {
            nextGreater[s.top()] = nums2[i];
            s.pop();
        }
        s.push(nums2[i]);
    }
    
    for (int i = 0; i < nums1.size(); ++i) {
        nums1[i] = nextGreater.count(nums1[i]) ? nextGreater[nums1[i]] : -1;
    }
    
    return nums1;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    
    cout << maxSubArraySum(arr) << endl;

    int n1, n2;
    cin >> n1 >> n2;
    vector<int> nums1(n1), nums2(n2);
    
    for (int i = 0; i < n1; ++i) {
        cin >> nums1[i];
    }
    
    for (int i = 0; i < n2; ++i) {
        cin >> nums2[i];
    }
    
    vector<int> result = nextGreaterElement(nums1, nums2);
    
    for (int i = 0; i < result.size(); ++i) {
        cout << result[i] << " ";
    }
    
    return 0;
}
